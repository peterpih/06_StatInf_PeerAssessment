with_tz(depart, "Asia/Hong_Kong")
arrice<-with_tz(arrive, "Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <= mdy("June 17, 2008", tz="Singapore")
last_time <_ mdy("June 17, 2008", tz="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long(last_time, arrive)
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
quit()
rm(arrice)
rm(dt1)
rm(dt2)
rm(last_time)
rm(my_date)
rm(nyc)
rm(arrive)
rm(depart)
rm(how_long)
tm(this_day)
rm(this_day)
rm(this_moment)
rm(path2csv)
rm(stopwatch)
View(top_counts)
rm(list=ls())
quit()
list.files()
list.files("first.R")
list.files()
list.files("first.R")
list.files("a.csv")
list.files(a.csv)
list.file("")
list.file()
list.files()
list.files("a.csv")
list.files("")
list.files(".")
dir()
dir ("a.csv")
dir ("x")
dir ("qw")
dir ("a*")
?dir
list.files("specdata")
dir()
a<-read.csv("0001.csv")
a<-read.csv("001.csv")
a<-read.csv("specdata/001.csv")
llist.files(".", "001.csv")
list.files(".", "001.csv")
list.files(".", "specdata/001.csv")
list.files("specdata", "001.csv")
list.files(".", "001.csv")
list.files(".", "001.csv", recursive=T)
list.files(".", "001.csv", recursive=T)
quit()
x<-c(norm(10), runif(10),rnorm(10,1))
x<-c(rnorm(10), runif(10),rnorm(10,1))
f<-gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify-F)
tapply(x,f,mean,simplify=F)
tapply(x,f,mean,simplify=T)
tapply(,f,range)
tapply(x,f,range)
tapply(x,f,range,simplfy=T)
log(-1)
myfunc <- function(x){
x +1
}
myfunc(2)
myfunc(2)
myfunc <- function(x){
x +1
f = x*x
x = x +f
}
myfunc(2)
myfunc <- function(x){
x +1
f <- x*x
x <- x +f
}
myfunc(2)
myfunc <- function(x){
x +1
f <- x*x
x <- x +f
x
}
myfunc(2)
debug(myfunc)
myfunc(2)
1
2
x
bye()
quit()
q
0
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector()
str(v)
v$get
v$set
v$m
x
cacheMean()
cachemean()
cachemean(v)
v
v$setmean <- 4
v$getmean
v$getmean()
v$setmean() <- 4
v$setmean <- 4
str(v)
x <- matrix(rep(1,9),3,3)
x
x_inv = solve(x)
y<-10
f<-function(x) {
y<-2
y^2 + g(x)
}
g<-function(x){
x*y
}
f(3)
x <- matrix(1:9,3,3)
x
x_inv <-solve(x)
x <- matrix(rnorm(9),3,3)
x_inv <-solve(x)
x_inv
x
x*x_inv
makevector(x)
makeVector(x)
v<-makeVector(x)
cashmean(x)
cachemean(x)
x$getmean
v$getmean
cachemean(v)
cachemean(v)
x1 <- matrix(rnorm(9),3,3)
cachemean(v)
x1 <- matrix(rnorm(9),3,3)
v<-makeVector(x1)
cachemean(v)
cachemean(v)
v <- x
cachemean(v)
v<-makeVector(x1)
cachemean(v)
cachemean(v)
x1 <- matrix(rnorm(9),3,3)
cachemean(v)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
x_inv <- NULL
set <- function(y) {
x <<- y
x_inv <<- NULL
}
get <- function() x
setinv <- function(solve) x_inv <<- solve
getinv <- function() x_inv
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
#
#  This function is called whenever the inverse matrix of the original
#   matrix stored in makeCacheMatrix is needed
#
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
x_inv <- x$getinv()
if(!is.null(x_inv)) {
message("getting cached data")
return(x_inv)
}
x_orig <- x$get()
x_inv <- solve(x_orig, ...)
x$setinv(x_inv)
x_inv
}
x
v<-makeCacheMatrix(x)
v
str(v)
cacheSolve(v)
cacheSolve(v)
x<-matrix(rnorm(100), 10,10)
v<-makeCacheMatrix(x)
cacheSolve(v)
cacheSolve(v)
seed()
set.seed(10)
x<-matrix(rnorm(100), 10,10)
x
x<-matrix(rnorm(100), 10,10)
x
set.seed(10)
x<-matrix(rnorm(100), 10,10)
x
## Put comments here that give an overall description of what your
## functions do
#
#   These functions need a square non singular input matrix so an inverse can be calculated
#   The following was used for testing:
#       set.seed(10)
#       x <- matrix(rnorm(100),10,10)
#
## Write a short comment describing this function
#   Input:  square data matrix
#   Output: structure which contains:
#               original matrix
#               it's inverse
#               some calling functions for storing and getting one of the two matrices
#
#
makeCacheMatrix <- function(x = matrix()) {
x_inv <- NULL                                # initialize pointer to inverted matrix
set <- function(y) {                         # store the original matrix
x <<- y
x_inv <<- NULL
}
get <- function() x                          # get the original matrix
setinv <- function(solve) x_inv <<- solve    # save the inverted matrix
getinv <- function() x_inv                   # get the cached inverted matrix
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
#
#     This function is called whenever the inverse matrix of the original
#     matrix stored in makeCacheMatrix() is needed, the inverted matrix is calcualted the first time it's called
#     a cached version of the inverted matrix is used on subsequent calls
#
#   Input:  the structure returned by makeCacheMatrix
#   Output: the inverse of the original matrix
#
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
x_inv <- x$getinv()                            # has the inverse matrix been computed?
if(is.null(x_inv)) {                           # if so
message("solve")
x_orig <- x$get()                        # if not
x_inv <- solve(x_orig, ...)              # compute the inverse
x$setinv(x_inv)                          # cache it
}
x_inv                                          # return inverse matrix
}
v<-makeCacheMatrix(x)
cacheSolve(v)
cacheSolve(v)
## Put comments here that give an overall description of what your
#
#   These functions need a square non-singular (invertible) input matrix
#   The following was used for testing:
#       set.seed(10)
#       x <- matrix(rnorm(100),10,10)
#
#
## Write a short comment describing this function
#   Input:  square data matrix
#   Output: structure which contains:
#               original matrix
#               inverse matrix
#               some calling functions for storing and getting either of the two matrices
#                       set, get - save, return original matrix
#                       setinv, getinv - save, return the inverse matrix
#
#
makeCacheMatrix <- function(x = matrix()) {
x_inv <- NULL                                # initialize pointer to inverted matrix
# NULL indicates the inverse needs to be calculated
set <- function(y) {
x <<- y                                    # store the original matrix
x_inv <<- NULL
}
get <- function() x                          # get the original matrix
setinv <- function(solve) x_inv <<- solve    # save the inverted matrix
getinv <- function() x_inv                   # get the cached inverted matrix
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
#
#   Called whenever the inverse matrix of the original matrix stored in makeCacheMatrix() is needed
#   The inverted matrix is calculated the first time it's called
#   A cached version of the inverted matrix is then used on subsequent calls
#
#   Input:  the structure returned by makeCacheMatrix
#   Output: the inverse of the original matrix
#
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
x_inv <- x$getinv()                            # has the inverse matrix been computed?
if(is.null(x_inv)) {                           # non NULL indicates inverse has already been calculated
x_orig <- x$get()                        # if not
x_inv <- solve(x_orig, ...)              # compute the inverse
x$setinv(x_inv)                          # cache it
}
x_inv                                          # return inverse matrix
}
x<-matrix(rnorm(100), 10,10)
v<-makeCacheMatrix(x)
cacheSolve(v)
cacheSolve(v)
dir()
Sys.glob("*.*")
Sys.glob("*.R")
setwd("specdata")
dir()
lapply("001.csv", read.csv)
a<-lapply("001.csv", read.csv)
class (a)
a<-sapply("001.csv", read.csv)
class (a)
b<-as.dataframe(a)
b<-as.data.frame(a)
class(b)
b
c<- read.csv("001.csv")
class(c)
c
?sapply
a<-sapply("001.csv", read.csv, simplyfy=F)
a<-sapply("001.csv", read.csv, simplify=F)
class(a)
aa<-rbind(a,a)
class(aa)
class(a)
a<-read.csv("001.csv")
class(a)
aa<-rbind(a,a)
class(aa)
a<- lapply("001.csv, read.csv")
a<- lapply("001.csv, read.csv)
a<- lapply("001.csv", read.csv)
class(a)
a<- sapply("001.csv", read.csv)
class(a)
a<- sapply("001.csv", read.csv, simp)
x
names(x) <-c("a","b","c","d","e","f","g","h","i","j")
x
x<-list(a,2,3,4)
x
x<-list(1,2,3,4)
x
names(x)<-c("a","b","c","d")
x
x["a"]
x[.(a)]
chicago<-readRDS("chicago.rds")
library(dplyr)
rm(list=ls())
library(dplyr)
chicago<-readRDS("chicago.rds")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
file.exists("./data")
dir("data")
getwd()
setdw("..")
setwd("..")
getwd()
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
curl
load.packages("XML")
load.package("XML")
0
quit()
curl
quit()
quit()
mylist <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
mylist
mylist[1]
mylist[[1]]
mylist[[2]]
mylist[[3]]
mylist$list
names(mylist)
mylist$letters
mylist$""
mylist$
""
unname(mylist)
mylist <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
mylist
firstElement <- function(x){x[1]}
sapply(mylist, firstElement)
firstElement <- function(x){x[[1]]}
sapply(mylist, firstElement)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv",method="curl")
download.file(fileUrl2,destfile="./data/solutions.csv",method="curl")
lbrary(curl)
library(curl)
download.file(fileUrl1,destfile="./data/reviews.csv",method="curl")
?curl
library("curl")
library("libcurl")
install.package("libcurl")
quit()
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Exploratory_Data_Analysis")
swirl()
?qbeta
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight
)
?xyplot
a<-xyplot(weight ~ Time | Diet, BodyWeight)
class(a)
?panel.lmline()
?text()
?trellis.par.set()
?par()
?print.trellis()
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
class(g)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
?stats_smooth
??stats_smooth
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
g <- xyplot()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
pbinom(6,size=8, prob=0.5, lower.tail=FALSE)
pbinom(6,size=8, prob=0.5)
?pbinom
pbinom(5, size=8, prob=0.5, lower.tail=FALSE)
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
pbinom(10, size=8, prob=0.5, lower.tail=FALSE)
pbinom(8, size=8, prob=0.5, lower.tail=FALSE)
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
quit()
install.packages("pdflatex")
getwd()
cd StatInf_PeerAssessment
setwd("StatInf_PeerAssessment")
